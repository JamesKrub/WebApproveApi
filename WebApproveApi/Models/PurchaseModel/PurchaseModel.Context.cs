//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApproveApi.Models.PurchaseModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SalePurchaseEntities : DbContext
    {
        public SalePurchaseEntities()
            : base("name=SalePurchaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Purchase> Purchases { get; set; }
    
        public virtual int sp_PurchaseDelete(string purchaseId)
        {
            var purchaseIdParameter = purchaseId != null ?
                new ObjectParameter("purchaseId", purchaseId) :
                new ObjectParameter("purchaseId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PurchaseDelete", purchaseIdParameter);
        }
    
        public virtual int sp_PurchaseInsert(string purchaseId, string name, Nullable<System.DateTime> date, Nullable<decimal> price, Nullable<int> numberQty)
        {
            var purchaseIdParameter = purchaseId != null ?
                new ObjectParameter("purchaseId", purchaseId) :
                new ObjectParameter("purchaseId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var numberQtyParameter = numberQty.HasValue ?
                new ObjectParameter("NumberQty", numberQty) :
                new ObjectParameter("NumberQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PurchaseInsert", purchaseIdParameter, nameParameter, dateParameter, priceParameter, numberQtyParameter);
        }
    
        public virtual ObjectResult<sp_PurchaseSelect_Result> sp_PurchaseSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PurchaseSelect_Result>("sp_PurchaseSelect");
        }
    
        public virtual ObjectResult<sp_PurchaseSelectTtlMoneyEchMonthByYear_Result> sp_PurchaseSelectTtlMoneyEchMonthByYear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PurchaseSelectTtlMoneyEchMonthByYear_Result>("sp_PurchaseSelectTtlMoneyEchMonthByYear");
        }
    
        public virtual ObjectResult<sp_PurchaseSelectYear_Result> sp_PurchaseSelectYear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PurchaseSelectYear_Result>("sp_PurchaseSelectYear");
        }
    
        public virtual int sp_PurchaseUpdate(string purchaseId, string name, Nullable<System.DateTime> date, Nullable<decimal> price, Nullable<int> numberQty)
        {
            var purchaseIdParameter = purchaseId != null ?
                new ObjectParameter("purchaseId", purchaseId) :
                new ObjectParameter("purchaseId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var numberQtyParameter = numberQty.HasValue ?
                new ObjectParameter("NumberQty", numberQty) :
                new ObjectParameter("NumberQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PurchaseUpdate", purchaseIdParameter, nameParameter, dateParameter, priceParameter, numberQtyParameter);
        }
    }
}
